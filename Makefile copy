NAME ?= "common-go-dependency-tree"
export PACKAGE_NAME ?= $(NAME)
ifeq ($(OS),Windows_NT)
	export VERSION=$(shell .\scripts\workflows\current-version.bat -f VERSION)
else
	export VERSION=$(shell ./scripts/workflows/current-version.sh -f VERSION)
endif

COBERTURA = cobertura

GOX = gox

GOLANGCI_LINT = golangci-lint

DEVELOPMENT_TOOLS = $(GOX) $(COBERTURA) $(GOLANGCI_LINT)

.PHONY: help
help:
  # make version:
	# make test
	# make lint

.PHONY: version
version:
	@echo Version: $(VERSION)


.PHONY: test
test:
	@echo "Running tests..."
ifeq ($(OS),Windows_NT)
	@scripts\test.bat -d ./pkg
else
	@scripts/test -d ./pkg
endif

.PHONY: coverage
coverage:
	@echo "Running coverage report..."
ifeq ($(OS),Windows_NT)
	@scripts\coverage.bat -d ./pkg
else
	@scripts/coverage -d ./pkg
endif

.PHONY: lint
lint:
	@echo "Running linter..."
	$(shell docker ps -a -f "name=$(PACKAGE_NAME)-linter")
ifeq ($(.SHELLSTATUS),1)
	@echo "Linter container already exists, starting it..."
	$(shell docker start $(PACKAGE_NAME)-linter)
else
	@echo "Linter container does not exist, creating it..."
	$(shell docker run --name $(PACKAGE_NAME)-linter -e RUN_LOCAL=true -e VALIDATE_ALL_CODEBASE=true -e VALIDATE_JSCPD=false -v .:/tmp/lint ghcr.io/super-linter/super-linter:slim-v5)
endif
	$(shell docker cp $(PACKAGE_NAME)-linter:/tmp/lint/lint.log ./lint-report.log)
	$(shell docker stop $(PACKAGE_NAME)-linter)
	$(shell docker rm $(PACKAGE_NAME)-linter)
	@echo "Linter report saved to lint-report.log"
	@echo "Linter finished."

lint1:
	@echo "Running linter..."
	$(shell docker ps -a -f "name=$(PACKAGE_NAME)-linter")
ifeq ($(.SHELLSTATUS),1)
	@echo "Linter container already exists, starting it..."
	$(shell docker start $(PACKAGE_NAME)-linter)
else
	@echo "Linter container does not exist, creating it..."
	$(shell docker run --name $(PACKAGE_NAME)-linter -e RUN_LOCAL=true -e VALIDATE_ALL_CODEBASE=true -e VALIDATE_JSCPD=false -v .:/tmp/lint ghcr.io/super-linter/super-linter:slim-v5)
endif
	$(shell docker cp $(PACKAGE_NAME)-linter:/tmp/lint/lint.log ./lint-report.log)

	@echo "Linter report saved to lint-report.log"
	@echo "Linter finished."



.PHONY: build
build:
	@echo "Building..."
ifeq ($(OS),Windows_NT)
	@scripts\build.bat -d ./pkg -p $(PACKAGE_NAME)
else
	@scripts/build -d ./pkg -p $(PACKAGE_NAME)
endif

.PHONY: deps
deps: $(DEVELOPMENT_TOOLS)

$(COBERTURA):
	@echo "Installing cobertura..."
	@go install github.com/axw/gocov/gocov@latest
	@go install github.com/AlekSi/gocov-xml@latest
	@go install github.com/matm/gocov-html/cmd/gocov-html@latest

$(GOX):
	@echo "Installing gox..."
	@go install github.com/mitchellh/gox@latest

$(GOLANGCI_LINT):
	@echo "Installing golangci-lint..."
	@go install github.com/golangci/golangci-lint/cmd/golangci-lint